ursa = require "ursa"

exports.generateKeypair = () ->
  keypair = ursa.generatePrivateKey 2048, 65537
  publicKey = ursa.createPublicKey keypair.toPublicPem(), "utf8"
  privateKey = ursa.createPrivateKey keypair.toPrivatePem(), "", "utf8"
  [ publicKey, privateKey ]

exports.publicKey = (pem) ->
  ursa.createPublicKey pem, "utf8"

exports.privateKey = (pem) ->
  ursa.createPrivateKey pem, "", "utf8"

exports.getPublicPem = (publicKey) ->
  if ursa.isPublicKey publicKey
    publicKey.toPublicPem "utf8"
  else
    undefined

exports.getPrivatePem = (privateKey) ->
  if ursa.isPrivateKey privateKey
    privateKey.toPrivatePem "utf8"
  else
    undefined

exports.encrypt = (buffer, pubkey, callback) ->
  data = new Buffer buffer.toString()
  input = []
  for i in [0..data.length - 1] by 214
    if i + 214 < data.length
      tmp = new Buffer(214)
      data.copy tmp, 0, i, i + 214
      input.push tmp
    else
      tmp = new Buffer(data.length - i)
      data.copy tmp, 0, i
      input.push tmp
  output = ''
  for i in input
    output += (pubkey.encrypt i, undefined, 'base64', ursa.RSA_PKCS1_OAEP_PADDING) + '$'
  callback output

exports.decrypt = (string, privkey, callback) ->
  input = []
  for s in string.split '$'
    input.push s if s.length > 0
  buffer = []
  for data in input
    buffer.push privkey.decrypt data, 'base64', undefined, ursa.RSA_PKCS1_OAEP_PADDING
  length = 0
  length += b.length for b in buffer
  output = new Buffer(length)
  data = ''
  data += b.toString() for b in buffer
  output.write data
  callback output