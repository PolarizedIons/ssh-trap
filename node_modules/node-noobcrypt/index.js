// Generated by CoffeeScript 1.6.3
(function() {
  var ursa;

  ursa = require("ursa");

  exports.generateKeypair = function() {
    var keypair, privateKey, publicKey;
    keypair = ursa.generatePrivateKey(2048, 65537);
    publicKey = ursa.createPublicKey(keypair.toPublicPem(), "utf8");
    privateKey = ursa.createPrivateKey(keypair.toPrivatePem(), "", "utf8");
    return [publicKey, privateKey];
  };

  exports.publicKey = function(pem) {
    return ursa.createPublicKey(pem, "utf8");
  };

  exports.privateKey = function(pem) {
    return ursa.createPrivateKey(pem, "", "utf8");
  };

  exports.getPublicPem = function(publicKey) {
    if (ursa.isPublicKey(publicKey)) {
      return publicKey.toPublicPem("utf8");
    } else {
      return void 0;
    }
  };

  exports.getPrivatePem = function(privateKey) {
    if (ursa.isPrivateKey(privateKey)) {
      return privateKey.toPrivatePem("utf8");
    } else {
      return void 0;
    }
  };

  exports.encrypt = function(buffer, pubkey, callback) {
    var data, i, input, output, tmp, _i, _j, _len, _ref;
    data = new Buffer(buffer.toString());
    input = [];
    for (i = _i = 0, _ref = data.length - 1; _i <= _ref; i = _i += 214) {
      if (i + 214 < data.length) {
        tmp = new Buffer(214);
        data.copy(tmp, 0, i, i + 214);
        input.push(tmp);
      } else {
        tmp = new Buffer(data.length - i);
        data.copy(tmp, 0, i);
        input.push(tmp);
      }
    }
    output = '';
    for (_j = 0, _len = input.length; _j < _len; _j++) {
      i = input[_j];
      output += (pubkey.encrypt(i, void 0, 'base64', ursa.RSA_PKCS1_OAEP_PADDING)) + '$';
    }
    return callback(output);
  };

  exports.decrypt = function(string, privkey, callback) {
    var b, buffer, data, input, length, output, s, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
    input = [];
    _ref = string.split('$');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (s.length > 0) {
        input.push(s);
      }
    }
    buffer = [];
    for (_j = 0, _len1 = input.length; _j < _len1; _j++) {
      data = input[_j];
      buffer.push(privkey.decrypt(data, 'base64', void 0, ursa.RSA_PKCS1_OAEP_PADDING));
    }
    length = 0;
    for (_k = 0, _len2 = buffer.length; _k < _len2; _k++) {
      b = buffer[_k];
      length += b.length;
    }
    output = new Buffer(length);
    data = '';
    for (_l = 0, _len3 = buffer.length; _l < _len3; _l++) {
      b = buffer[_l];
      data += b.toString();
    }
    output.write(data);
    return callback(output);
  };

}).call(this);
